package ${packageName}.${tableName}.controller;

import ${packageName}.${tableName}.service.${TableName}Service;
import ${packageName}.${tableName}.domain.${TableName};
import ${projectName}.core.base.RestResponse;


import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@Api(tags = "${tableName}")
@RequestMapping("api")
public class ${TableName}Controller {

	@Autowired
	private ${TableName}Service ${tableName}Service;

	@ApiOperation(value = "分页查询所有", notes = "")
	@ApiResponses({
		@ApiResponse(code = 200, message = "查询成功"),
		@ApiResponse(code = 400, message = "参数验证失败")
	})
	@GetMapping("${tableName}")
    public RestResponse<Page<${TableName}>> findPage(@RequestParam(defaultValue = "0") Integer page,
                                                     @RequestParam(defaultValue = "15") Integer size,
                                                     @RequestParam(defaultValue = "") String order) {
		return RestResponse.success(
                        ${tableName}Service.findPage(
                                PageRequest.of(page, size,
                                        Sort.by(Sort.Direction.DESC, order.equals("") ? "createTime" : order)
                                )
                        )
                );
	}

    @ApiOperation(value = "新增", notes = "")
    @ApiResponses({
        @ApiResponse(code = 200, message = "添加成功"),
        @ApiResponse(code = 400, message = "参数验证失败")
    })
    @PostMapping("${tableName}")
    public RestResponse<?> create(@RequestBody ${TableName} ${tableName}) {
        ${tableName}Service.create(${tableName});
        return RestResponse.success();
    }

    @ApiOperation(value = "修改", notes = "")
    @ApiResponses({
        @ApiResponse(code = 200, message = "修改成功"),
        @ApiResponse(code = 400, message = "参数验证失败")
    })
    @PatchMapping("${tableName}")
    public RestResponse<?> update(@RequestBody ${TableName} ${tableName}) {
        ${tableName}Service.update(${tableName});
        return RestResponse.success();
    }

    @ApiOperation(value = "删除", notes = "")
    @ApiResponses({
        @ApiResponse(code = 200, message = "删除成功"),
        @ApiResponse(code = 400, message = "参数验证失败")
    })
    @DeleteMapping("${tableName}/{id}")
    public RestResponse<?> delete(@RequestParam Integer id) {
        ${tableName}Service.delete(${tableName}Service.findOne(id));
        return RestResponse.success();
    }

    @ApiOperation(value = "通过主键查找", notes = "")
    @ApiResponses({
        @ApiResponse(code = 200, message = "查询成功"),
        @ApiResponse(code = 400, message = "参数错误")
    })
    @GetMapping("${tableName}/{id}")
    public RestResponse<${TableName}> findOne(@PathVariable Integer id) {
        return RestResponse.success(${tableName}Service.findOne(id));
    }
}
